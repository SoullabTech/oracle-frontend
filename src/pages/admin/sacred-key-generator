import { useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { motion, AnimatePresence } from 'framer-motion';

const adjectives = ['SPIRAL', 'MYSTIC', 'COSMIC', 'WILD', 'SACRED', 'LUMINOUS', 'ANCIENT', 'INFINITE'];
const nouns = ['DREAM', 'FAITH', 'LIGHT', 'BLOSSOM', 'WHISPER', 'SONG', 'GARDEN', 'STAR'];

export default function SacredKeyGeneratorPage() {
  const [numKeys, setNumKeys] = useState(5);
  const [generatedKeys, setGeneratedKeys] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [portalActive, setPortalActive] = useState(false);

  const generateSacredKey = () => {
    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const noun = nouns[Math.floor(Math.random() * nouns.length)];
    const number = Math.floor(100 + Math.random() * 900);
    return `${adjective}-${noun}-${number}`;
  };

  const handleGenerateKeys = async () => {
    setLoading(true);
    setPortalActive(true);
    const keys = Array.from({ length: numKeys }, generateSacredKey);

    const { error } = await supabase
      .from('sacred_keys')
      .insert(keys.map(key => ({ key, claimed: false })));

    if (error) {
      console.error('Error saving sacred keys:', error.message);
      alert('❌ Error saving sacred keys!');
    } else {
      setGeneratedKeys(keys);
      alert('🌸 Sacred Keys generated successfully!');
    }
    setLoading(false);
    setPortalActive(false);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-8 bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.6 }}
        className="bg-white bg-opacity-80 rounded-3xl shadow-2xl p-10 max-w-xl w-full"
      >
        <h1 className="text-4xl font-bold mb-6 text-center text-indigo-700">🔮 Sacred Key Generator</h1>

        <div className="flex flex-col space-y-4">
          <label className="font-semibold text-gray-700">How many Sacred Keys?</label>
          <input
            type="number"
            value={numKeys}
            onChange={(e) => setNumKeys(parseInt(e.target.value))}
            className="border border-gray-300 rounded-lg p-2 text-center"
            min={1}
          />

          <button
            onClick={handleGenerateKeys}
            disabled={loading}
            className="mt-4 px-6 py-3 bg-purple-500 text-white rounded-xl hover:bg-purple-600 transition"
          >
            {loading ? 'Generating...' : '✨ Generate Sacred Keys'}
          </button>
        </div>

        <AnimatePresence>
          {portalActive && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 1, repeat: Infinity, repeatType: 'loop' }}
              className="absolute top-0 left-0 w-full h-full flex items-center justify-center bg-gradient-to-br from-purple-200 via-indigo-300 to-pink-200 bg-opacity-40"
            >
              <div className="text-6xl animate-spin">🌀</div>
            </motion.div>
          )}
        </AnimatePresence>

        {generatedKeys.length > 0 && (
          <div className="mt-8">
            <h2 className="text-2xl font-bold mb-4 text-center text-indigo-600">🌟 Your Sacred Keys</h2>
            <div className="space-y-2">
              {generatedKeys.map((key, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="text-center bg-indigo-50 p-2 rounded-lg shadow"
                >
                  {key}
                </motion.div>
              ))}
            </div>
          </div>
        )}
      </motion.div>
    </div>
  );
}
